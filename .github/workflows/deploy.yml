name: CI/CD for Spring Boot

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ./Backend
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'

    # 테스트 무시하고 gradle 빌드
    - name: Build with Gradle (Skip Tests)
      run: ./gradlew build -x test  

    - name: Cache Gradle packages
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle
 
      
    # 여러개의 환경 변수를 .env 파일에 저장   
    - name: Set up environment variables
      run: |
          echo "DOCKE_HUB_PASSWORD=${{ secrets.DOCKE_HUB_PASSWORD }}" >> .env
          echo "DOCKE_HUB_USERNAME=${{ secrets.DOCKE_HUB_USERNAME }}" >> .env
          echo "EC2_INSTANCE_IPADDRESS= ${{ secrets.EC2_INSTANCE_IPADDRESS }}" >> .env
          echo "EC2_INSTANCE_PRIVATEKEY=${{ secrets.EC2_INSTANCE_PRIVATEKEY }}" >> .env
          echo "EC2_SERVER_USER=${{ secrets.EC2_SERVER_USER }}" >> .env
          echo "DOCKE_HUB_REPOSITORY=${{secrets.DOCKE_HUB_REPOSITORY}}" >> .env

           # DB 관련 환경 변수 추가
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

    - name: Build with Jib
      run: |
        source .env
        
        # .env 파일을 사용하여 Jib로 빌드
        ./gradlew jib
        
        # .env 파일 제거
        rm .env 
        
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKE_HUB_USERNAME }}
        password: ${{ secrets.DOCKE_HUB_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKE_HUB_USERNAME }}/${{secrets.DOCKE_HUB_REPOSITORY}}:latest .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKE_HUB_USERNAME }}/${{secrets.DOCKE_HUB_REPOSITORY}}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
       host: ${{ secrets.EC2_INSTANCE_IPADDRESS }}
       username: ${{ secrets.EC2_SERVER_USER    }}
       key: ${{ secrets.EC2_INSTANCE_PRIVATEKEY }}
       script: |
          sudo docker pull ${{ secrets.DOCKE_HUB_USERNAME }}/${{ secrets.DOCKE_HUB_REPOSITORY }}:latest
          sudo docker stop ${{ secrets.DOCKE_HUB_REPOSITORY }} || true
          sudo docker rm ${{ secrets.DOCKE_HUB_REPOSITORY }} || true
          sudo docker run -d -p 8080:8080 --name ${{ secrets.DOCKE_HUB_REPOSITORY }} ${{ secrets.DOCKE_HUB_USERNAME }}/${{ secrets.DOCKE_HUB_REPOSITORY }}:latest

